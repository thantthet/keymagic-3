name: Build Windows with Dual Code Signing

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number'
        type: string
        required: false
        default: '0.0.1'
      sign:
        description: 'Sign the binaries and installer'
        type: boolean
        required: false
        default: false
    secrets:
      SIGNPATH_API_TOKEN:
        required: false

jobs:
  build-binaries:
    runs-on: windows-latest
    name: Build Windows Binaries (x64 + ARM64)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc,aarch64-pc-windows-msvc
      
      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-multi-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-multi-
      
      - name: Install CMake
        uses: lukka/get-cmake@latest
      
      - name: Update version
        run: |
          echo ${{ inputs.version }} > version.txt
          ./update-version.ps1
        shell: pwsh
      
      - name: Build x64 TSF DLL and GUI
        working-directory: keymagic-windows
        run: |
          call make.bat build x64 Release
        shell: cmd
      
      - name: Build x64 Tray Manager
        working-directory: keymagic-windows/tray-manager
        run: |
          call make.bat build x64 Release
        shell: cmd
      
      - name: Build ARM64 TSF DLL and GUI
        working-directory: keymagic-windows
        run: |
          call make.bat build arm64 Release
        shell: cmd
      
      - name: Build ARM64 Tray Manager
        working-directory: keymagic-windows/tray-manager
        run: |
          call make.bat build arm64 Release
        shell: cmd
      
      - name: Build ARM64X forwarder
        working-directory: keymagic-windows
        run: |
          call make-arm64x.bat Release
        shell: cmd
      
      # Collect only binaries that are included in the installer (based on setup.iss)
      - name: Collect binaries for signing
        run: |
          New-Item -ItemType Directory -Force -Path ./binaries-to-sign
          
          # Files referenced in setup.iss:
          # x64 binaries
          Copy-Item target/x86_64-pc-windows-msvc/release/keymagic-gui.exe ./binaries-to-sign/keymagic-gui-x64.exe
          Copy-Item keymagic-windows/tray-manager/build-x64/bin/Release/keymagic-tray.exe ./binaries-to-sign/keymagic-tray-x64.exe
          Copy-Item keymagic-windows/tsf/build-x64/Release/KeyMagicTSF_x64.dll ./binaries-to-sign/
          
          # ARM64 binaries
          Copy-Item target/aarch64-pc-windows-msvc/release/keymagic-gui.exe ./binaries-to-sign/keymagic-gui-arm64.exe
          Copy-Item keymagic-windows/tray-manager/build-arm64/bin/Release/keymagic-tray.exe ./binaries-to-sign/keymagic-tray-arm64.exe
          
          # ARM64X forwarder DLLs (used on ARM64 systems)
          Copy-Item keymagic-windows/tsf/build-arm64x/KeyMagicTSF.dll ./binaries-to-sign/
          Copy-Item keymagic-windows/tsf/build-arm64x/KeyMagicTSF_arm64.dll ./binaries-to-sign/
          Copy-Item keymagic-windows/tsf/build-arm64x/KeyMagicTSF_x64.dll ./binaries-to-sign/
          
          Write-Host "Binaries collected for signing (only those included in installer):"
          Get-ChildItem ./binaries-to-sign
        shell: pwsh
      
      - name: Upload unsigned binaries
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-binaries
          path: ./binaries-to-sign/*

  sign-binaries:
    needs: build-binaries
    if: inputs.sign == true
    runs-on: windows-latest
    name: Sign Individual Binaries
    
    steps:
      - name: Download unsigned binaries
        uses: actions/download-artifact@v4
        with:
          name: unsigned-binaries
          path: ./unsigned-binaries/
      
      - name: Upload binaries for SignPath
        id: upload-binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-for-signing
          path: ./unsigned-binaries/*
      
      - name: Submit binaries to SignPath for signing
        id: signpath-sign-binaries
        uses: signpath/github-action-submit-signing-request@v1.1
        env:
          SIGNPATH_SIGNING_POLICY_SLUG: |
            ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) 
            && 'release-signing' 
            || 'test-signing' }}
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '${{ vars.SIGNPATH_ORGANIZATION_ID }}'
          project-slug: '${{ vars.SIGNPATH_PROJECT_SLUG }}'
          signing-policy-slug: '${{ env.SIGNPATH_SIGNING_POLICY_SLUG }}'
          artifact-configuration-slug: 'application-binaries'
          github-artifact-id: '${{ steps.upload-binaries.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: './signed-binaries/'
          download-signed-artifact: true
      
      - name: Organize signed binaries
        run: |
          New-Item -ItemType Directory -Force -Path ./organized-binaries/x64
          New-Item -ItemType Directory -Force -Path ./organized-binaries/arm64
          New-Item -ItemType Directory -Force -Path ./organized-binaries/arm64x
          
          # Move x64 binaries
          Move-Item ./signed-binaries/keymagic-gui-x64.exe ./organized-binaries/x64/keymagic-gui.exe
          Move-Item ./signed-binaries/keymagic-tray-x64.exe ./organized-binaries/x64/keymagic-tray.exe
          
          # Move ARM64 binaries
          Move-Item ./signed-binaries/keymagic-gui-arm64.exe ./organized-binaries/arm64/keymagic-gui.exe
          Move-Item ./signed-binaries/keymagic-tray-arm64.exe ./organized-binaries/arm64/keymagic-tray.exe
          
          # Handle KeyMagicTSF_x64.dll - used in both x64 and ARM64X configurations
          Copy-Item ./signed-binaries/KeyMagicTSF_x64.dll ./organized-binaries/x64/
          Move-Item ./signed-binaries/KeyMagicTSF_x64.dll ./organized-binaries/arm64x/
          
          # Move other ARM64X forwarder DLLs
          Move-Item ./signed-binaries/KeyMagicTSF.dll ./organized-binaries/arm64x/
          Move-Item ./signed-binaries/KeyMagicTSF_arm64.dll ./organized-binaries/arm64x/
          
          Write-Host "Signed binaries organized:"
          Get-ChildItem -Recurse ./organized-binaries
        shell: pwsh
      
      - name: Upload signed binaries
        uses: actions/upload-artifact@v4
        with:
          name: signed-binaries
          path: ./organized-binaries/

  # Fallback job when signing is disabled - just reorganize unsigned binaries
  prepare-unsigned-binaries:
    needs: build-binaries
    if: inputs.sign != true
    runs-on: windows-latest
    name: Prepare Unsigned Binaries
    
    steps:
      - name: Download unsigned binaries
        uses: actions/download-artifact@v4
        with:
          name: unsigned-binaries
          path: ./unsigned-binaries/
      
      - name: Organize unsigned binaries
        run: |
          New-Item -ItemType Directory -Force -Path ./organized-binaries/x64
          New-Item -ItemType Directory -Force -Path ./organized-binaries/arm64
          New-Item -ItemType Directory -Force -Path ./organized-binaries/arm64x
          
          # Move x64 binaries
          Move-Item ./unsigned-binaries/keymagic-gui-x64.exe ./organized-binaries/x64/keymagic-gui.exe
          Move-Item ./unsigned-binaries/keymagic-tray-x64.exe ./organized-binaries/x64/keymagic-tray.exe
          
          # Move ARM64 binaries
          Move-Item ./unsigned-binaries/keymagic-gui-arm64.exe ./organized-binaries/arm64/keymagic-gui.exe
          Move-Item ./unsigned-binaries/keymagic-tray-arm64.exe ./organized-binaries/arm64/keymagic-tray.exe
          
          # Handle KeyMagicTSF_x64.dll - used in both x64 and ARM64X configurations
          Copy-Item ./unsigned-binaries/KeyMagicTSF_x64.dll ./organized-binaries/x64/
          Move-Item ./unsigned-binaries/KeyMagicTSF_x64.dll ./organized-binaries/arm64x/
          
          # Move other ARM64X forwarder DLLs
          Move-Item ./unsigned-binaries/KeyMagicTSF.dll ./organized-binaries/arm64x/
          Move-Item ./unsigned-binaries/KeyMagicTSF_arm64.dll ./organized-binaries/arm64x/
        shell: pwsh
      
      - name: Upload organized binaries
        uses: actions/upload-artifact@v4
        with:
          name: signed-binaries  # Use same name for compatibility
          path: ./organized-binaries/

  build-installer:
    needs: [sign-binaries, prepare-unsigned-binaries]
    if: |
      !cancelled() && 
      (needs.sign-binaries.result == 'success' || needs.prepare-unsigned-binaries.result == 'success')
    runs-on: windows-latest
    name: Build Installer with Signed Binaries
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: pwsh
      
      - name: Download signed/unsigned binaries
        uses: actions/download-artifact@v4
        with:
          name: signed-binaries
          path: ./signed-binaries/
      
      - name: Place binaries in build locations
        run: |
          # Create necessary directories
          New-Item -ItemType Directory -Force -Path keymagic-windows/tsf/build-x64/Release
          New-Item -ItemType Directory -Force -Path keymagic-windows/tsf/build-arm64/Release
          New-Item -ItemType Directory -Force -Path keymagic-windows/tsf/build-arm64x
          New-Item -ItemType Directory -Force -Path target/x86_64-pc-windows-msvc/release
          New-Item -ItemType Directory -Force -Path target/aarch64-pc-windows-msvc/release
          New-Item -ItemType Directory -Force -Path keymagic-windows/tray-manager/build-x64/bin/Release
          New-Item -ItemType Directory -Force -Path keymagic-windows/tray-manager/build-arm64/bin/Release
          
          # Copy x64 binaries
          Copy-Item ./signed-binaries/x64/KeyMagicTSF_x64.dll keymagic-windows/tsf/build-x64/Release/
          Copy-Item ./signed-binaries/x64/keymagic-gui.exe target/x86_64-pc-windows-msvc/release/
          Copy-Item ./signed-binaries/x64/keymagic-tray.exe keymagic-windows/tray-manager/build-x64/bin/Release/
          
          # Copy ARM64 binaries
          Copy-Item ./signed-binaries/arm64/keymagic-gui.exe target/aarch64-pc-windows-msvc/release/
          Copy-Item ./signed-binaries/arm64/keymagic-tray.exe keymagic-windows/tray-manager/build-arm64/bin/Release/
          
          # Copy ARM64X forwarder DLLs (these are used for ARM64 systems)
          Copy-Item ./signed-binaries/arm64x/* keymagic-windows/tsf/build-arm64x/
          
          # Note: There's no separate ARM64 native TSF DLL - ARM64 systems use the ARM64X forwarder
          
          Write-Host "Binaries placed for installer build"
        shell: pwsh
      
      - name: Update version
        run: |
          echo ${{ inputs.version }} > version.txt
          ./update-version.ps1
        shell: pwsh
      
      - name: Build installer with signed binaries
        working-directory: keymagic-windows/installer
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Q setup.iss
        shell: cmd
      
      - name: Upload unsigned installer
        id: upload-unsigned-installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-unsigned
          path: keymagic-windows/installer/output/KeyMagic3-Setup-*.exe

  sign-installer:
    needs: build-installer
    if: inputs.sign == true
    runs-on: windows-latest
    name: Sign Final Installer
    
    steps:
      - name: Download unsigned installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer-unsigned
          path: ./unsigned-installer/
      
      - name: Upload installer for SignPath
        id: upload-installer
        uses: actions/upload-artifact@v4
        with:
          name: installer-for-final-signing
          path: ./unsigned-installer/KeyMagic3-Setup-*.exe
      
      - name: Submit installer to SignPath for signing
        id: signpath-sign-installer
        uses: signpath/github-action-submit-signing-request@v1.1
        env:
          SIGNPATH_SIGNING_POLICY_SLUG: |
            ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) 
            && 'release-signing' 
            || 'test-signing' }}
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '${{ vars.SIGNPATH_ORGANIZATION_ID }}'
          project-slug: '${{ vars.SIGNPATH_PROJECT_SLUG }}'
          signing-policy-slug: '${{ env.SIGNPATH_SIGNING_POLICY_SLUG }}'
          artifact-configuration-slug: 'installer'
          github-artifact-id: '${{ steps.upload-installer.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: './signed-installer/'
          download-signed-artifact: true
      
      - name: Upload signed installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ./signed-installer/KeyMagic3-Setup-*.exe

  # Finalize unsigned installer when signing is disabled
  finalize-unsigned:
    needs: build-installer
    if: inputs.sign != true
    runs-on: ubuntu-latest
    name: Finalize Unsigned Installer
    
    steps:
      - name: Download unsigned installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer-unsigned
          path: ./installer/
      
      - name: Upload as final installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ./installer/KeyMagic3-Setup-*.exe